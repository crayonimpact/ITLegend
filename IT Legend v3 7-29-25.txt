<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>IT Legend Success Plan v2</title>
<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: #000000;
    color: #ffffff;
    min-height: 100vh;
    line-height: 1.6;
    overflow-x: hidden;
  }

  /* Animated background */
  body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 20% 50%, rgba(255, 107, 76, 0.15) 0%, transparent 50%),
      radial-gradient(circle at 80% 80%, rgba(255, 143, 112, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 40% 20%, rgba(255, 107, 76, 0.08) 0%, transparent 50%);
    animation: bgFloat 20s ease-in-out infinite;
    pointer-events: none;
    z-index: 0;
  }

  @keyframes bgFloat {
    0%, 100% { transform: translate(0, 0) scale(1); }
    33% { transform: translate(-20px, -20px) scale(1.05); }
    66% { transform: translate(20px, -10px) scale(0.95); }
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    position: relative;
    z-index: 1;
  }

  .header {
    text-align: center;
    margin-bottom: 1rem;
    padding: 3rem 0 2rem;
    position: relative;
  }

  .header h1 {
    font-size: 4rem;
    font-weight: 900;
    background: linear-gradient(135deg, #ff6b4a 0%, #ff8f70 50%, #ffd4cc 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 1rem;
    letter-spacing: -0.03em;
    animation: titleGlow 3s ease-in-out infinite;
  }

  @keyframes titleGlow {
    0%, 100% { filter: brightness(1); }
    50% { filter: brightness(1.2); }
  }

  .header p {
    font-size: 1.3rem;
    color: #94a3b8;
    max-width: 1100px;
    margin: 0 auto;
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 0.3s forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .calculator-section {
    background: rgba(255, 255, 255, 0.02);
    backdrop-filter: blur(40px);
    border-radius: 32px;
    padding: 2rem;
    margin-bottom: 2rem;
    border: 1px solid rgba(255, 255, 255, 0.08);
    box-shadow: 
      0 20px 60px rgba(0, 0, 0, 0.5),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    position: relative;
    overflow: hidden;
  }

  .calculator-section::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 107, 76, 0.05) 0%, transparent 70%);
    animation: sectionGlow 15s ease-in-out infinite;
  }

  @keyframes sectionGlow {
    0%, 100% { transform: rotate(0deg); }
    50% { transform: rotate(180deg); }
  }

  .progress-bar {
    width: 100%;
    height: 6px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
    margin-bottom: 2rem;
    overflow: hidden;
    position: relative;
  }

  .progress-bar::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    animation: shimmer 2s infinite;
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #ff6b4a 0%, #ff8f70 50%, #ffd4cc 100%);
    border-radius: 4px;
    transition: width 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    width: 0%;
    position: relative;
    box-shadow: 0 0 20px rgba(255, 107, 76, 0.5);
  }

  .selections-summary {
    margin-bottom: 1rem;
    opacity: 0;
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .summary-content {
    background: rgba(255, 255, 255, 0.03);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 1.5rem 2rem;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
    position: relative;
    padding-right: 6rem;
  }

  .summary-top {
    margin-bottom: 1rem;
  }

  .summary-bottom {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .summary-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .summary-label {
    font-weight: 600;
    color: #ff6b4c;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    flex-shrink: 0;
  }

  .summary-value {
    color: #ffffff;
    font-weight: 500;
    font-size: 0.9rem;
    flex: 1;
    word-wrap: break-word;
    max-width: calc(100% - 150px);
  }

  .edit-btn {
    position: absolute;
    top: 1.5rem;
    right: 2rem;
    padding: 0.5rem 1.25rem;
    font-size: 0.9rem;
    font-weight: 600;
    background: rgba(255, 255, 255, 0.05);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    overflow: hidden;
  }

  .edit-btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(255, 107, 76, 0.3);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .edit-btn:hover::before {
    width: 300px;
    height: 300px;
  }

  .edit-btn:hover {
    border-color: #ff6b4c;
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(255, 107, 76, 0.3);
  }

  .pain-points-section h3 {
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: #ffffff;
    text-align: center;
    position: relative;
    z-index: 1;
  }

  .pain-points-section p {
    color: #94a3b8;
    margin-bottom: 1.5rem;
    text-align: center;
    font-size: 1rem;
  }

  .pain-points-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin-bottom: 1.75rem;
  }

  .pain-point-card {
    background: rgba(255, 255, 255, 0.03);
    border: 2px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
    padding: 1.25rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }

  .pain-point-card::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255, 107, 76, 0.1), transparent);
    transform: rotate(45deg);
    transition: all 0.5s ease;
    opacity: 0;
  }

  .pain-point-card:hover::before {
    animation: shimmerCard 0.5s ease;
    opacity: 1;
  }

  @keyframes shimmerCard {
    0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
    100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
  }

  .pain-point-card:hover {
    background: rgba(255, 255, 255, 0.06);
    border-color: rgba(255, 107, 76, 0.5);
    transform: translateY(-4px);
    box-shadow: 0 15px 40px rgba(255, 107, 76, 0.2);
  }

  .pain-point-card.active {
    background: linear-gradient(135deg, rgba(255, 107, 76, 0.15) 0%, rgba(255, 143, 112, 0.1) 100%);
    border-color: #ff6b4c;
    box-shadow: 
      0 0 0 1px rgba(255, 107, 76, 0.3),
      0 15px 50px rgba(255, 107, 76, 0.3);
    transform: translateY(-2px);
  }

  .pain-point-card label {
    display: flex;
    align-items: flex-start;
    cursor: pointer;
    gap: 1rem;
    width: 100%;
    height: 100%;
    padding: 0;
    position: relative;
  }

  .pain-point-card input[type="checkbox"] {
    width: 22px;
    height: 22px;
    margin-top: 0.25rem;
    accent-color: #ff6b4c;
    cursor: pointer;
    flex-shrink: 0;
    position: relative;
    z-index: 10;
    pointer-events: all;
  }
  
  .pain-point-card input[type="checkbox"]:hover {
    transform: scale(1.1);
  }

  .pain-point-content {
    flex: 1;
  }

  .pain-point-title {
    font-weight: 700;
    font-size: 1.05rem;
    color: #ffffff;
    margin-bottom: 0.3rem;
    line-height: 1.3;
  }

  .pain-point-description {
    font-size: 0.9rem;
    color: #94a3b8;
    font-style: italic;
    line-height: 1.3;
  }

  .questionnaire-section h3 {
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: #ffffff;
    text-align: center;
    position: relative;
    z-index: 1;
  }

  .questionnaire-section p {
    color: #94a3b8;
    margin-bottom: 1.5rem;
    text-align: center;
    font-size: 1rem;
  }

  .question-block {
    margin-bottom: 1.75rem;
    position: relative;
    z-index: 1;
  }

  .question-block h4 {
    font-size: 1.1rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
    color: #ff6b4c;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    padding: 0.5rem 0;
    border-bottom: 2px solid rgba(255, 107, 76, 0.3);
    position: relative;
  }

  .question-block h4::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background: linear-gradient(90deg, #ff6b4c, #ff8f70);
    transition: width 0.3s ease;
  }

  .question-block:hover h4::after {
    width: 100%;
  }

  .question-subtitle-inline {
    font-size: 0.75rem;
    font-weight: 400;
    color: #94a3b8;
    font-style: italic;
    text-transform: none;
    letter-spacing: normal;
    margin-left: 0.75rem;
  }

  .horizontal-questions {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-bottom: 1.5rem;
  }

  .half-width {
    margin-bottom: 0;
  }

  .tech-grid {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 0.75rem;
    margin-bottom: 0.5rem;
  }
  
  .tech-grid.cloud-services {
    grid-template-columns: repeat(4, 1fr);
  }

  .tech-card, .ea-card {
    background: rgba(255, 255, 255, 0.03);
    border: 2px solid rgba(255, 255, 255, 0.08);
    border-radius: 12px;
    padding: 1rem 0.75rem;
    text-align: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }

  .tech-card::before, .ea-card::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle, rgba(255, 107, 76, 0.1) 0%, transparent 70%);
    transform: translate(-50%, -50%) scale(0);
    transition: transform 0.5s ease;
    opacity: 0;
  }

  .tech-card:hover::before, .ea-card:hover::before {
    transform: translate(-50%, -50%) scale(2);
    opacity: 1;
  }

  .tech-card:hover, .ea-card:hover {
    background: rgba(255, 255, 255, 0.06);
    border-color: rgba(255, 107, 76, 0.5);
    transform: translateY(-4px);
    box-shadow: 0 10px 30px rgba(255, 107, 76, 0.2);
  }

  .tech-card.active, .ea-card.active {
    background: linear-gradient(135deg, rgba(255, 107, 76, 0.15) 0%, rgba(255, 143, 112, 0.1) 100%);
    border-color: #ff6b4c;
    box-shadow: 
      0 0 0 1px rgba(255, 107, 76, 0.3),
      0 10px 40px rgba(255, 107, 76, 0.3);
    transform: translateY(-2px);
  }

  .tech-card label, .ea-card label {
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    width: 100%;
    height: 100%;
    font-weight: 600;
    font-size: 0.95rem;
    color: #ffffff;
    line-height: 1.3;
    position: relative;
    z-index: 1;
  }

  .tech-card input[type="checkbox"], .ea-card input[type="radio"] {
    width: 20px;
    height: 20px;
    margin-right: 0.75rem;
    accent-color: #ff6b4c;
    cursor: pointer;
    position: relative;
    z-index: 10;
    pointer-events: all;
  }
  
  .tech-card input[type="checkbox"]:hover, .ea-card input[type="radio"]:hover {
    transform: scale(1.1);
  }

  .tech-name, .ea-name {
    font-weight: 600;
    font-size: 0.95rem;
    color: #ffffff;
  }

  .ea-options {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    max-width: 400px;
    margin: 0 auto;
  }

  .seat-input-compact {
    max-width: 250px;
    margin: 0 auto;
  }

  .seat-input-compact .seat-input {
    font-size: 1.25rem;
    padding: 0.75rem;
    text-align: center;
    background: rgba(255, 255, 255, 0.95);
    border: 3px solid rgba(255, 107, 76, 0.3);
    border-radius: 12px;
    color: #000000;
    font-weight: 700;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    width: 100%;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  .seat-input-compact .seat-input:focus {
    outline: none;
    border-color: #ff6b4c;
    box-shadow: 
      0 0 0 4px rgba(255, 107, 76, 0.2),
      0 8px 30px rgba(255, 107, 76, 0.3);
    transform: translateY(-2px);
  }

  .back-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0;
    font-size: 0.95rem;
    font-weight: 600;
    background: transparent;
    color: #94a3b8;
    border: none;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
  }
  
  .back-button:hover {
    color: #ff6b4c;
    transform: translateX(-4px) translateY(-50%);
  }
  
  .back-button::before {
    content: '←';
    font-size: 1.2rem;
    transition: transform 0.3s ease;
  }
  
  .back-button:hover::before {
    transform: translateX(-2px);
  }
  
  .button-container {
    position: relative;
    margin-top: 1.5rem;
    min-height: 60px;
    display: flex;
    align-items: center;
  }
  
  .calculate-btn {
    width: 100%;
    max-width: 280px;
    margin: 1.5rem auto 0;
    display: block;
    padding: 1.25rem 1.75rem;
    font-size: 1.1rem;
    font-weight: 700;
    background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 100%);
    color: white;
    border: none;
    border-radius: 14px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    box-shadow: 
      0 10px 30px rgba(255, 107, 76, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    position: relative;
    overflow: hidden;
  }

  .calculate-btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 110%;
    height: 110%;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, transparent 100%);
    transform: translate(-50%, -50%) rotate(45deg) translateY(-100%);
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .calculate-btn:hover::before {
    transform: translate(-50%, -50%) rotate(45deg) translateY(0);
  }

  .calculate-btn:hover {
    transform: translateY(-3px);
    box-shadow: 
      0 15px 40px rgba(255, 107, 76, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
  }

  .calculate-btn:active {
    transform: translateY(-1px);
  }

  .results-section {
    display: none;
  }

  .results-section.visible {
    display: block;
    animation: fadeInUp 0.6s ease-out;
  }

  .results-hero {
    text-align: center;
    padding: 3rem 0;
    position: relative;
    z-index: 1;
  }

  .results-title {
    font-size: 3.5rem;
    font-weight: 900;
    color: #ffffff;
    margin-bottom: 1rem;
    letter-spacing: -0.02em;
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 0.2s forwards;
  }

  .highlight-text {
    background: linear-gradient(135deg, #ff6b4a 0%, #ff8f70 50%, #ffd4cc 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .results-subtitle {
    font-size: 1.3rem;
    color: #94a3b8;
    margin-bottom: 3rem;
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 0.4s forwards;
  }

  .impact-display {
    background: rgba(255, 255, 255, 0.02);
    backdrop-filter: blur(40px);
    border-radius: 32px;
    padding: 3rem;
    border: 1px solid rgba(255, 255, 255, 0.08);
    box-shadow: 
      0 20px 60px rgba(0, 0, 0, 0.5),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    max-width: 600px;
    margin: 0 auto;
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 0.6s forwards;
  }

  .impact-label {
    font-size: 1.2rem;
    color: #94a3b8;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    margin-bottom: 1rem;
  }

  .impact-value {
    font-size: 5rem;
    font-weight: 900;
    background: linear-gradient(135deg, #ff6b4a 0%, #ff8f70 50%, #ffd4cc 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 1rem;
    letter-spacing: -0.02em;
    animation: impactPulse 3s ease-in-out infinite;
  }

  @keyframes impactPulse {
    0%, 100% { 
      filter: brightness(1) drop-shadow(0 0 30px rgba(255, 107, 76, 0.6));
      transform: scale(1);
    }
    50% { 
      filter: brightness(1.3) drop-shadow(0 0 50px rgba(255, 107, 76, 0.9));
      transform: scale(1.05);
    }
  }

  .scroll-to-details {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 2rem;
    padding: 0.875rem 1.75rem;
    font-size: 1rem;
    font-weight: 600;
    background: transparent;
    color: #ffffff;
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    animation: gentleBounce 2s ease-in-out infinite;
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 0.8s forwards, gentleBounce 2s ease-in-out 1.6s infinite;
  }
  
  .scroll-to-details:hover {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 107, 76, 0.5);
    color: #ff6b4c;
    transform: translateY(2px);
    animation: gentleBounce 2s ease-in-out infinite;
  }
  
  .scroll-to-details::before,
  .scroll-to-details::after {
    content: '↓';
    font-size: 1.2rem;
    transition: transform 0.3s ease;
  }
  
  .scroll-to-details:hover::before,
  .scroll-to-details:hover::after {
    transform: translateY(3px);
  }
  
  @keyframes gentleBounce {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-5px);
    }
  }

  .conquered-pain-points {
    padding: 0 2rem 3rem;
    margin-bottom: 3rem;
    margin-top: -2rem;
    text-align: center;
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 0.8s forwards;
  }

  .conquered-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 2rem;
  }

  .pain-points-list {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
    max-width: 1200px;
    margin: 0 auto;
  }

  .pain-point-item {
    background: rgba(255, 255, 255, 0.03);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 24px;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    font-weight: 600;
    color: #ffffff;
    position: relative;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    animation: painPointFadeIn 0.5s ease-out forwards;
    min-height: 60px;
    white-space: nowrap;
    flex: 0 0 auto;
  }
  
  .pain-point-text {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    min-height: 60px;
  }
  
  .challenge-text,
  .resolved-text {
    white-space: nowrap;
  }
  
  .challenge-text {
    opacity: 1;
    visibility: visible;
    transform: translateY(0) scale(1);
    filter: blur(0);
    transition: all 1s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .resolved-text {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%) scale(0.8);
    opacity: 0;
    visibility: hidden;
    filter: blur(10px);
    transition: all 1s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .pain-point-item.transformed .challenge-text {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px) scale(0.9);
    filter: blur(5px);
  }
  
  .pain-point-item.transformed .resolved-text {
    opacity: 1;
    visibility: visible;
    transform: translate(-50%, -50%) scale(1);
    filter: blur(0);
  }
  
  .pain-point-item.transformed {
    background: linear-gradient(135deg, rgba(255, 107, 76, 0.05) 0%, rgba(255, 143, 112, 0.03) 100%);
    border-color: rgba(255, 107, 76, 0.3);
    box-shadow: 0 0 30px rgba(255, 107, 76, 0.2);
  }
  
  .resolved-word {
    background: linear-gradient(135deg, #ff6b4a 0%, #ff8f70 50%, #ffd4cc 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    font-weight: 700;
    text-shadow: 0 0 30px rgba(255, 107, 76, 0.5);
    animation: resolvedGlow 2s ease-in-out infinite;
  }
  
  @keyframes resolvedGlow {
    0%, 100% { 
      filter: brightness(1) drop-shadow(0 0 10px rgba(255, 107, 76, 0.6));
    }
    50% { 
      filter: brightness(1.3) drop-shadow(0 0 20px rgba(255, 107, 76, 0.9));
    }
  }

  @keyframes painPointFadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .pain-point-item:hover {
    transform: translateY(-2px);
    border-color: rgba(255, 107, 76, 0.3);
    box-shadow: 0 10px 30px rgba(255, 107, 76, 0.2);
  }

  .lead-gate-section {
    background: rgba(255, 255, 255, 0.02);
    backdrop-filter: blur(40px);
    border-radius: 32px;
    padding: 3rem 2rem;
    margin: 3rem 2rem;
    border: 1px solid rgba(255, 255, 255, 0.08);
    box-shadow: 
      0 20px 60px rgba(0, 0, 0, 0.5),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    text-align: center;
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 1s forwards;
  }
  
  .lead-gate-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 1rem;
  }
  
  .lead-gate-subtitle {
    font-size: 1.2rem;
    color: #94a3b8;
    margin-bottom: 2.5rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .lead-form {
    max-width: 500px;
    margin: 0 auto;
  }
  
  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  .form-group.full-width {
    grid-column: 1 / -1;
  }
  
  .form-label {
    display: block;
    font-size: 0.9rem;
    font-weight: 600;
    color: #ffffff;
    margin-bottom: 0.5rem;
    text-align: left;
  }
  
  .form-input {
    width: 100%;
    padding: 0.875rem 1rem;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #ffffff;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .form-input::placeholder {
    color: #64748b;
  }
  
  .form-input:focus {
    outline: none;
    border-color: #ff6b4c;
    background: rgba(255, 255, 255, 0.08);
    box-shadow: 0 0 0 4px rgba(255, 107, 76, 0.1);
  }
  
  .form-submit {
    width: 100%;
    padding: 1.25rem 2rem;
    font-size: 1.1rem;
    font-weight: 700;
    background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 100%);
    color: white;
    border: none;
    border-radius: 14px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    box-shadow: 
      0 10px 30px rgba(255, 107, 76, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    position: relative;
    overflow: hidden;
    margin-top: 1.5rem;
  }
  
  .form-submit:hover {
    transform: translateY(-3px);
    box-shadow: 
      0 15px 40px rgba(255, 107, 76, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
  }
  
  .form-submit:active {
    transform: translateY(-1px);
  }
  
  .value-props {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(255, 255, 255, 0.08);
  }
  
  .value-prop {
    text-align: center;
  }
  
  .value-prop-icon {
    width: 48px;
    height: 48px;
    margin: 0 auto 1rem;
    background: linear-gradient(135deg, rgba(255, 107, 76, 0.2) 0%, rgba(255, 143, 112, 0.1) 100%);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
  }
  
  .value-prop-text {
    font-size: 0.95rem;
    color: #94a3b8;
    font-weight: 500;
  }
  
  .gated-content {
    display: none;
  }
  
  .gated-content.unlocked {
    display: block !important;
  }
  
  @media (max-width: 768px) {
    .form-row {
      grid-template-columns: 1fr;
    }
    
    .value-props {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
  }
  
  .table-section {
    background: rgba(255, 255, 255, 0.02);
    backdrop-filter: blur(40px);
    border-radius: 32px;
    padding: 3rem 2rem;
    margin: 0 2rem 3rem;
    border: 1px solid rgba(255, 255, 255, 0.08);
    box-shadow: 
      0 20px 60px rgba(0, 0, 0, 0.5),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 1.2s forwards;
    overflow-x: auto;
  }

  .table-title {
    font-size: 2rem;
    font-weight: 700;
    color: #ffffff;
    text-align: center;
    margin-bottom: 2rem;
  }

  .table-row {
    opacity: 0;
    animation: tableRowFadeIn 0.5s ease-out forwards;
  }

  @keyframes tableRowFadeIn {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .cta-section {
    text-align: center;
    padding: 4rem 2rem;
    background: rgba(255, 255, 255, 0.02);
    backdrop-filter: blur(20px);
    border-radius: 32px;
    margin: 0 2rem;
    border: 1px solid rgba(255, 255, 255, 0.08);
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 1.4s forwards;
  }

  .cta-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 1rem;
  }

  .cta-subtitle {
    font-size: 1.2rem;
    color: #94a3b8;
    margin-bottom: 2rem;
  }

  .cta-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .cta-button {
    padding: 1.25rem 2.5rem;
    font-size: 1.1rem;
    font-weight: 700;
    border: none;
    border-radius: 16px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .cta-button.primary {
    background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 100%);
    color: white;
    box-shadow: 0 10px 30px rgba(255, 107, 76, 0.3);
  }

  .cta-button.primary:hover {
    transform: translateY(-3px);
    box-shadow: 0 15px 40px rgba(255, 107, 76, 0.4);
  }

  .cta-button.secondary {
    background: rgba(255, 255, 255, 0.05);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.1);
  }

  .cta-button.secondary:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: #ff6b4c;
  }

  #exportableContent {
    background: transparent;
    border-radius: 24px;
    padding: 0;
    border: none;
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    box-shadow: none;
  }

  .impact-table {
    background: transparent;
    border-radius: 20px;
    padding: 0;
    border: none;
    overflow-x: auto;
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
    box-shadow: none;
  }

  .table-container {
    min-width: 900px;
    padding-left: 1rem;
  }

  .table-row {
    display: grid;
    grid-template-columns: 80px 1fr 1.5fr 1fr 2.5fr;
    gap: 1rem;
    align-items: stretch;
    padding: 1.25rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.08);
    transition: all 0.3s ease;
  }

  .table-row:hover {
    transform: translateX(5px);
  }

  .table-row:last-child {
    border-bottom: none;
  }

  .table-header {
    font-weight: 700;
    color: #ff6b4c;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.9rem;
    text-align: left;
  }

  .rank-number {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 100%);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 800;
    font-size: 1.1rem;
    box-shadow: 0 4px 15px rgba(255, 107, 76, 0.3);
    flex-shrink: 0;
    position: relative;
    z-index: 2;
  }

  .rank-number.top-rank {
    animation: pulseScale 2s ease-in-out infinite;
  }

  @keyframes pulseScale {
    0%, 100% { 
      transform: scale(1);
    }
    50% { 
      transform: scale(1.05);
    }
  }

  .service-name {
    font-weight: 700;
    color: #ffffff;
    font-size: 1.05rem;
  }

  .solution-text {
    font-size: 0.9rem;
    line-height: 1.4;
    color: #e2e8f0;
  }

  .impact-total {
    background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 100%);
    color: white;
    padding: 0.75rem 1rem;
    border-radius: 12px;
    font-weight: 800;
    font-size: 1.2rem;
    line-height: 1.2;
    text-align: center;
    flex: 1;
    min-width: 150px;
    max-width: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 
      0 6px 20px rgba(255, 107, 76, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  .metrics-breakdown {
    display: flex;
    flex-wrap: nowrap;
    gap: 0.75rem;
    flex: 1;
    align-items: stretch;
    flex-direction: row;
    overflow-x: auto;
  }

  .metric-component {
    background: linear-gradient(135deg, rgba(255, 107, 76, 0.08) 0%, rgba(255, 143, 112, 0.05) 100%);
    border: 1px solid rgba(255, 107, 76, 0.15);
    border-radius: 12px;
    padding: 1rem;
    font-size: 0.8rem;
    line-height: 1.3;
    flex: 1;
    min-width: 160px;
    max-width: 200px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .metric-component::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #ff6b4c, #ff8f70);
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }

  .metric-component:hover::before {
    transform: scaleX(1);
  }

  .metric-component:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(255, 107, 76, 0.15);
    border-color: rgba(255, 107, 76, 0.3);
    background: linear-gradient(135deg, rgba(255, 107, 76, 0.12) 0%, rgba(255, 143, 112, 0.08) 100%);
  }

  .metric-component .value {
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 0.4rem;
    font-size: 0.95rem;
  }

  .metric-component .description {
    color: #94a3b8;
    margin-bottom: 0.4rem;
    font-size: 0.75rem;
  }

  .metric-component .source {
    color: #ff8f70;
    font-size: 0.7rem;
  }

  .metric-component .source a {
    color: #ff8f70;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .metric-component .source a:hover {
    color: #ff6b4c;
    text-decoration: underline;
  }

  .pain-points-preview {
    opacity: 0;
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .preview-impact {
    font-size: 4.5rem;
    font-weight: 900;
    background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 50%, #ffd4cc 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    display: inline-block;
    margin: 0.25rem 0;
    letter-spacing: -0.02em;
    position: relative;
    animation: impactGlow 2s ease-in-out infinite;
  }

  @keyframes impactGlow {
    0%, 100% { 
      filter: brightness(1) drop-shadow(0 0 20px rgba(255, 107, 76, 0.5));
      transform: scale(1);
    }
    50% { 
      filter: brightness(1.2) drop-shadow(0 0 40px rgba(255, 107, 76, 0.8));
      transform: scale(1.05);
    }
  }

  .annual-impact-text {
    font-weight: 800;
    background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 50%, #ffd4cc 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    letter-spacing: 0.05em;
    animation: textGlow 2s ease-in-out infinite;
  }

  @keyframes textGlow {
    0%, 100% { 
      filter: brightness(1) drop-shadow(0 0 15px rgba(255, 107, 76, 0.6));
    }
    50% { 
      filter: brightness(1.3) drop-shadow(0 0 25px rgba(255, 107, 76, 0.9));
    }
  }

  .notification {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 100%);
    color: white;
    padding: 1.25rem 2rem;
    border-radius: 12px;
    z-index: 10000;
    font-weight: 700;
    box-shadow: 
      0 15px 40px rgba(0,0,0,0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    max-width: 90vw;
    text-align: center;
    opacity: 0;
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .notification.show {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.05);
  }

  @media (max-width: 768px) {
    .container {
      padding: 1rem;
    }
    
    .header h1 {
      font-size: 3rem;
    }
    
    .calculator-section {
      padding: 2rem 1.5rem;
    }
    
    .pain-points-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .horizontal-questions {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    
    .tech-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
    }
    
    .tech-grid.cloud-services {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .tech-card {
      padding: 1rem 0.5rem;
    }
    
    .tech-card label {
      font-size: 0.85rem;
    }
    
    .tech-card input[type="checkbox"] {
      width: 18px;
      height: 18px;
      margin-right: 0.5rem;
    }
    
    .summary-content {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }
    
    .summary-left {
      flex-direction: column;
      gap: 0.75rem;
      width: 100%;
    }
    
    .summary-item {
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .header h1 {
      font-size: 2.5rem;
    }
    
    .results-title {
      font-size: 2rem;
    }
    
    .impact-value {
      font-size: 3rem;
    }
  }
</style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1><span style="color: white; -webkit-text-fill-color: white;">Become an</span> IT Legend</h1>
      <p>Every company needs a <span style="color: #ff6b4c; font-weight: 600;">Hero</span> to conquer the ever-evolving challenges in the modern IT Landscape.<br>Let <span style="color: #ffffff; font-weight: 600;">Crayon</span> be your guide on the path to becoming an <span style="color: #ff6b4c; font-weight: 600;">IT Legend</span>.</p>
    </div>

    <div class="progress-bar">
      <div class="progress-fill" id="progressBar"></div>
    </div>

    <div class="selections-summary" id="selectionsSummary" style="display: none;">
      <div class="summary-content">
        <div class="summary-top">
          <div class="summary-item">
            <span class="summary-label">Challenges:</span>
            <span class="summary-value" id="painPointsSummary"></span>
          </div>
        </div>
        <div class="summary-bottom">
          <div class="summary-item">
            <span class="summary-label">Technologies:</span>
            <span class="summary-value" id="techSummary"></span>
          </div>
          <div class="summary-item">
            <span class="summary-label">Enterprise Agreement:</span>
            <span class="summary-value" id="eaSummary"></span>
          </div>
          <div class="summary-item">
            <span class="summary-label">Organization Size:</span>
            <span class="summary-value" id="sizeSummary"></span>
          </div>
        </div>
        <button id="editSelections" class="edit-btn">Edit</button>
      </div>
    </div>

    <!-- Challenges Section - Shown First -->
    <div class="pain-points-section" id="painPointsSection">
      <div class="calculator-section">
        <h3>Which IT challenges are you trying to conquer?</h3>
        <p>Select all that apply.</p>
        
        <div class="pain-points-grid">
          <div class="pain-point-card" id="painPoint1Card">
            <label>
              <input type="checkbox" id="painPoint1Checkbox">
              <div class="pain-point-content">
                <div class="pain-point-title">Cloud Cost Chaos</div>
                <div class="pain-point-description">Uncontrolled cloud costs, lack of visibility, no optimization</div>
              </div>
            </label>
          </div>
          <div class="pain-point-card" id="painPoint2Card">
            <label>
              <input type="checkbox" id="painPoint2Checkbox">
              <div class="pain-point-content">
                <div class="pain-point-title">AI Overwhelm</div>
                <div class="pain-point-description">Not sure where to start with Copilot or GenAI</div>
              </div>
            </label>
          </div>
          <div class="pain-point-card" id="painPoint3Card">
            <label>
              <input type="checkbox" id="painPoint3Checkbox">
              <div class="pain-point-content">
                <div class="pain-point-title">License Complexity</div>
                <div class="pain-point-description">Confusing agreements, software sprawl, poor license hygiene</div>
              </div>
            </label>
          </div>
          <div class="pain-point-card" id="painPoint4Card">
            <label>
              <input type="checkbox" id="painPoint4Checkbox">
              <div class="pain-point-content">
                <div class="pain-point-title">Audit Anxiety</div>
                <div class="pain-point-description">Fear of true-ups, audits, or surprise software penalties</div>
              </div>
            </label>
          </div>
          <div class="pain-point-card" id="painPoint5Card">
            <label>
              <input type="checkbox" id="painPoint5Checkbox">
              <div class="pain-point-content">
                <div class="pain-point-title">Cloud Migration Mayhem</div>
                <div class="pain-point-description">Legacy systems, internal pushback, or unclear ROI from moving to cloud</div>
              </div>
            </label>
          </div>
          <div class="pain-point-card" id="painPoint6Card">
            <label>
              <input type="checkbox" id="painPoint6Checkbox">
              <div class="pain-point-content">
                <div class="pain-point-title">CSP Confusion</div>
                <div class="pain-point-description">Missing value, limited support, or unclear incentives under CSP</div>
              </div>
            </label>
          </div>
          <div class="pain-point-card" id="painPoint7Card">
            <label>
              <input type="checkbox" id="painPoint7Checkbox">
              <div class="pain-point-content">
                <div class="pain-point-title">Security Threats</div>
                <div class="pain-point-description">Growing M365 risks: data loss, compliance gaps, weak controls</div>
              </div>
            </label>
          </div>
          <div class="pain-point-card" id="painPoint8Card">
            <label>
              <input type="checkbox" id="painPoint8Checkbox">
              <div class="pain-point-content">
                <div class="pain-point-title">Microsoft Support Bottlenecks</div>
                <div class="pain-point-description">Time-draining escalations and slow response to critical issues</div>
              </div>
            </label>
          </div>
        </div>
        
        <button id="continueToEnvironment" class="calculate-btn" style="width: 100%; max-width: 280px; margin: 1.5rem auto 0; display: block; padding: 1.25rem 1.75rem; font-size: 1.1rem; font-weight: 700; background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 100%); color: white; border: none; border-radius: 14px; cursor: pointer; text-transform: uppercase; letter-spacing: 0.5px; box-shadow: 0 10px 30px rgba(255, 107, 76, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.2); position: relative; overflow: hidden;">Continue</button>
      </div>
    </div>

    <!-- Questionnaire Section - Hidden Initially -->
    <div class="questionnaire-section" id="questionnaireSection" style="display: none;">
      <!-- Challenges Summary for Questionnaire -->
      <div class="selections-summary" id="questionnaireSelectionsSummary" style="display: block; margin-bottom: 1.5rem;">
        <div class="summary-content">
          <div class="summary-top">
            <div class="summary-item">
              <span class="summary-label">Selected Challenges:</span>
              <span class="summary-value" id="questionnairePainPointsSummary"></span>
            </div>
          </div>
          <button id="editFromQuestionnaire" class="edit-btn">Edit</button>
        </div>
      </div>
      
      <div class="calculator-section">
        <h3>Tell us about your environment</h3>
        <p>We'll customize the service recommendations based on your technology stack</p>
        
        <div class="question-block">
          <h4>Which Cloud Services do you use? <span class="question-subtitle-inline">Select all that apply</span></h4>
          <div class="tech-grid cloud-services">
            <div class="tech-card" id="azureCard">
              <label>
                <input type="checkbox" id="azureCheckbox">
                <span class="tech-name">Azure</span>
              </label>
            </div>
            <div class="tech-card" id="m365Card">
              <label>
                <input type="checkbox" id="m365Checkbox">
                <span class="tech-name">M365</span>
              </label>
            </div>
            <div class="tech-card" id="awsCard">
              <label>
                <input type="checkbox" id="awsCheckbox">
                <span class="tech-name">AWS</span>
              </label>
            </div>
            <div class="tech-card" id="googleCard">
              <label>
                <input type="checkbox" id="googleCheckbox">
                <span class="tech-name">Google</span>
              </label>
            </div>
          </div>
        </div>

        <div class="question-block">
          <h4>Which Software do you use? <span class="question-subtitle-inline">Select all that apply</span></h4>
          <div class="tech-grid">
            <div class="tech-card" id="microsoftCard">
              <label>
                <input type="checkbox" id="microsoftCheckbox">
                <span class="tech-name">Microsoft</span>
              </label>
            </div>
            <div class="tech-card" id="ibmCard">
              <label>
                <input type="checkbox" id="ibmCheckbox">
                <span class="tech-name">IBM</span>
              </label>
            </div>
            <div class="tech-card" id="oracleCard">
              <label>
                <input type="checkbox" id="oracleCheckbox">
                <span class="tech-name">Oracle</span>
              </label>
            </div>
            <div class="tech-card" id="sapCard">
              <label>
                <input type="checkbox" id="sapCheckbox">
                <span class="tech-name">SAP</span>
              </label>
            </div>
            <div class="tech-card" id="servicenowCard">
              <label>
                <input type="checkbox" id="servicenowCheckbox">
                <span class="tech-name">ServiceNow</span>
              </label>
            </div>
          </div>
        </div>

        <div class="horizontal-questions">
          <div class="question-block half-width">
            <h4>Do you have an Enterprise Agreement (EA)?</h4>
            <div class="ea-options">
              <div class="ea-card" id="eaYesCard">
                <label>
                  <input type="radio" name="eaStatus" id="eaYes" value="yes">
                  <span class="ea-name">Yes</span>
                </label>
              </div>
              <div class="ea-card" id="eaNoCard">
                <label>
                  <input type="radio" name="eaStatus" id="eaNo" value="no">
                  <span class="ea-name">No</span>
                </label>
              </div>
            </div>
          </div>

          <div class="question-block half-width">
            <h4>Organization Size <span class="question-subtitle-inline">Number of users/seats</span></h4>
            <div class="seat-input-compact">
              <input type="text" id="seatsQuestionnaire" class="seat-input" value="1,000" min="1" max="1000000">
            </div>
          </div>
        </div>

        <div class="button-container">
          <button id="backToChallenges" class="back-button">Back to Challenges</button>
          <button id="continueToResults" class="calculate-btn" style="width: 100%; max-width: 280px; margin: 0 auto; display: block; padding: 1.25rem 1.75rem; font-size: 1.1rem; font-weight: 700; background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 100%); color: white; border: none; border-radius: 14px; cursor: pointer; text-transform: uppercase; letter-spacing: 0.5px; box-shadow: 0 10px 30px rgba(255, 107, 76, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.2); position: relative; overflow: hidden;">Calculate Impact</button>
        </div>
      </div>
    </div>

    <!-- Results Section -->
    <div class="results-section" id="resultsSection">
      <div class="results-hero">
        <h1 class="results-title">The Path to Becoming an <span class="highlight-text">IT Legend</span></h1>
        <p class="results-subtitle">Your personalized roadmap to conquering IT challenges</p>
        
        <div class="impact-display">
          <div class="impact-label">Estimated Annual Impact</div>
          <div class="impact-value" id="heroImpactDisplay">$0</div>
          <div class="impact-context" id="impactContext">For 1,000 users with Azure, M365</div>
        </div>
        
        <button class="scroll-to-details" id="scrollToDetails" onclick="scrollToDetailsSection()" style="display: inline-flex; align-items: center; gap: 0.5rem; margin-top: 2rem; padding: 0.875rem 1.75rem; font-size: 1rem; font-weight: 600; background: transparent; color: #ffffff; border: 2px solid rgba(255, 255, 255, 0.2); border-radius: 50px; cursor: pointer; opacity: 0; transform: translateY(30px);">See Detailed Breakdown</button>
      </div>

      <div class="conquered-pain-points">
        <h2 class="conquered-title">Conquered Challenges</h2>
        <div class="pain-points-list" id="conqueredPainPointsList">
          <!-- Challenges will be populated here -->
        </div>
      </div>

      <!-- Lead Generation Gate -->
      <div class="lead-gate-section" id="leadGateSection">
        <h2 class="lead-gate-title">Unlock Your Detailed IT Roadmap</h2>
        <p class="lead-gate-subtitle">See your personalized service recommendations with specific cost breakdowns and implementation strategies</p>
        
        <form class="lead-form" id="leadForm">
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">First Name *</label>
              <input type="text" class="form-input" id="firstName" placeholder="John" required>
            </div>
            <div class="form-group">
              <label class="form-label">Last Name *</label>
              <input type="text" class="form-input" id="lastName" placeholder="Doe" required>
            </div>
          </div>
          
          <div class="form-group full-width">
            <label class="form-label">Work Email *</label>
            <input type="email" class="form-input" id="email" placeholder="john.doe@company.com" required>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Company *</label>
              <input type="text" class="form-input" id="company" placeholder="Acme Corp" required>
            </div>
            <div class="form-group">
              <label class="form-label">Phone (Optional)</label>
              <input type="tel" class="form-input" id="phone" placeholder="+1 (555) 123-4567">
            </div>
          </div>
          
          <button type="button" class="form-submit" id="submitLead" onclick="handleLeadSubmit()">Get My Detailed Roadmap</button>
        </form>
        
        <div class="value-props">
          <div class="value-prop">
            <div class="value-prop-icon">📊</div>
            <div class="value-prop-text">Detailed impact breakdown for each service</div>
          </div>
          <div class="value-prop">
            <div class="value-prop-icon">🎯</div>
            <div class="value-prop-text">Priority ranking based on your impact</div>
          </div>
          <div class="value-prop">
            <div class="value-prop-icon">📧</div>
            <div class="value-prop-text">PDF report sent to your inbox</div>
          </div>
        </div>
      </div>

      <!-- Gated Content - Initially Hidden -->
      <div class="gated-content" id="gatedContent">
        <div id="exportableContent">
          <div class="table-section">
            <h2 class="table-title">Your Detailed Impact Breakdown</h2>
            <div class="impact-table">
              <div class="table-container">
                <div class="table-row table-header-row">
                  <div class="table-header">Rank</div>
                  <div class="table-header">Service</div>
                  <div class="table-header">Solution</div>
                  <div class="table-header">Est. Annual Impact</div>
                  <div class="table-header">Impact Metrics</div>
                </div>
                <div id="tableContent">
                  <!-- Table rows will be populated here -->
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="cta-section">
          <h2 class="cta-title">Ready to Start Your Journey?</h2>
          <p class="cta-subtitle">Let Crayon guide you on the path to becoming an IT Legend</p>
          <div class="cta-buttons">
            <button class="cta-button primary" id="scheduleCall">Schedule a Call</button>
            <button class="cta-button secondary" id="downloadResults">Download Results</button>
          </div>
        </div>
      </div>
      
      <div style="height: 4rem;"></div>
    </div>
  </div>

  <script>
    var painPointMapping = {
      1: ["aws", "ao", "co", "csp"], // Cloud Cost Chaos
      2: ["copilot"], // AI Overwhelm
      3: ["lo", "ea", "la"], // License Complexity
      4: ["as", "ea"], // Audit Anxiety
      5: ["cm", "ao", "aws"], // Cloud Migration Mayhem
      6: ["csp", "co", "ao"], // CSP Confusion
      7: ["ds", "tp"], // Security Threats
      8: ["ps"] // Microsoft Support Bottlenecks
    };

    var painPointNames = {
      1: "Cloud Cost Chaos",
      2: "AI Overwhelm",
      3: "License Complexity",
      4: "Audit Anxiety",
      5: "Cloud Migration Mayhem",
      6: "CSP Confusion",
      7: "Security Threats",
      8: "Microsoft Support Bottlenecks"
    };
    
    var painPointTransforms = {
      1: { challenge: "Cloud Cost Chaos", resolved: "Cloud Cost Control" },
      2: { challenge: "AI Overwhelm", resolved: "AI Confidence" },
      3: { challenge: "License Complexity", resolved: "License Mastery" },
      4: { challenge: "Audit Anxiety", resolved: "Audit Excellence" },
      5: { challenge: "Cloud Migration Mayhem", resolved: "Cloud Migration Momentum" },
      6: { challenge: "CSP Confusion", resolved: "CSP Clarity" },
      7: { challenge: "Security Threats", resolved: "Security Strength" },
      8: { challenge: "Microsoft Support Bottlenecks", resolved: "Microsoft Support Agility" }
    };

    var serviceData = {
      ds: { 
        name: "M365 Data Security & Governance", 
        solution: "Crayon's M365 Data Security and Governance offer helps you find and fix hidden data risks in Microsoft 365—so you can stop guessing, start protecting, and feel confident about compliance.",
        requiredTech: ["M365"]
      },
      tp: { 
        name: "M365 Threat Protection", 
        solution: "Crayon's Threat Protection helps overwhelmed teams stay ahead of fast-moving cyber threats by delivering expert-driven, real-time defense—so you don't have to do it all alone.",
        requiredTech: ["M365"]
      },
      ps: { 
        name: "Premium Support", 
        solution: "Premium Support gives you direct access to the right people, faster resolutions, and proactive guidance—so you can stay focused on your work, not your support tickets.",
        requiredTech: ["Azure", "M365", "Microsoft"]
      },
      cm: { 
        name: "Cloud Migration (Azure & M365)", 
        solution: "Crayon takes the confusion out of cloud migration—giving you a clear, guided path from outdated infrastructure to a smarter, scalable future.",
        requiredTech: ["Azure", "M365"]
      },
      ao: { 
        name: "Azure Operate", 
        solution: "Azure Operate powered by ePlus takes the complexity out of managing Azure by handling operations, governance, and cost control—so you can stay focused on innovation, not infrastructure.",
        requiredTech: ["Azure"]
      },
      co: { 
        name: "Cloud Optimization", 
        solution: "Crayon's Cloud Optimization offer helps customers see where their money is going, cut waste, and make smarter choices—so they get more value from the cloud.",
        requiredTech: ["Azure", "M365", "AWS", "Google"]
      },
      aws: { 
        name: "AWS CloudSmart", 
        solution: "Crayon's AWS CloudSmart delivers immediate billing discounts, ongoing optimization savings, and expert advisory services—so you get more value from every AWS dollar spent.",
        requiredTech: ["AWS"]
      },
      lo: { 
        name: "License Optimization", 
        solution: "Crayon's License Optimization helps you reduce software costs, eliminate waste, and ensure compliance—delivering measurable savings on your software investments.",
        requiredTech: ["Azure", "M365", "Microsoft", "AWS", "IBM", "Oracle", "SAP", "ServiceNow"]
      },
      la: { 
        name: "License Advisory", 
        solution: "Crayon's License Advisory provides expert guidance for renewals, true-ups, and ongoing compliance—helping you avoid costs and reduce administrative burden.",
        requiredTech: ["Azure", "M365", "Microsoft", "AWS", "IBM", "Oracle", "SAP", "ServiceNow"]
      },
      as: { 
        name: "Audit Support", 
        solution: "Crayon's Audit Support helps you prepare for and navigate vendor audits with confidence—reducing true-up costs and minimizing internal resource drain.",
        requiredTech: ["Azure", "M365", "Microsoft", "AWS", "IBM", "Oracle", "SAP", "ServiceNow"]
      },
      ea: { 
        name: "EA Managed Service", 
        solution: "Crayon's EA Managed Service handles your entire Enterprise Agreement lifecycle—delivering significant license savings and freeing your team from administrative overhead.",
        requiredTech: ["Azure", "M365", "Microsoft"],
        requiresEA: true
      },
      copilot: { 
        name: "M365 Copilot Adoption & Readiness", 
        solution: "Crayon's M365 Copilot Adoption & Readiness accelerates your deployment timeline and increases productive usage—helping you realize Copilot's productivity benefits faster and more effectively.",
        requiredTech: ["M365"]
      },
      csp: { 
        name: "CSP Care Pack", 
        solution: "Crayon's CSP Care Pack bundles essential services with CSP pricing advantages—delivering integrated support, security, advisory, and AI readiness with additional cost savings.",
        requiredTech: ["Azure"]
      }
    };

    var userSelections = {
      painPoints: [],
      technologies: [],
      hasEA: null
    };
    var currentStep = 1;
    var totalSteps = 3;

    function updateProgressBar() {
      var progressPercentage = (currentStep / totalSteps) * 100;
      document.getElementById('progressBar').style.width = progressPercentage + '%';
    }

    function showNotification(message, type) {
      type = type || 'info';
      
      // Only show error notifications
      if (type !== 'error') {
        return;
      }
      
      var notification = document.createElement('div');
      notification.className = 'notification';
      notification.textContent = message;
      notification.style.background = 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)';
      
      document.body.appendChild(notification);
      
      setTimeout(function() {
        notification.classList.add('show');
      }, 100);
      
      setTimeout(function() {
        notification.classList.remove('show');
        setTimeout(function() {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }

    function updatePainPointCardStates() {
      for (var i = 1; i <= 8; i++) {
        var card = document.getElementById('painPoint' + i + 'Card');
        var checkbox = document.getElementById('painPoint' + i + 'Checkbox');
        
        if (card && checkbox) {
          if (checkbox.checked) {
            card.classList.add('active');
          } else {
            card.classList.remove('active');
          }
        }
      }
    }

    function updateTechCardStates() {
      var techOptions = ['azure', 'm365', 'aws', 'google', 'microsoft', 'ibm', 'oracle', 'sap', 'servicenow'];
      
      for (var i = 0; i < techOptions.length; i++) {
        var option = techOptions[i];
        var card = document.getElementById(option + 'Card');
        var checkbox = document.getElementById(option + 'Checkbox');
        
        if (card && checkbox) {
          if (checkbox.checked) {
            card.classList.add('active');
          } else {
            card.classList.remove('active');
          }
        }
      }
    }

    function updateEACardStates() {
      var eaYes = document.getElementById('eaYes');
      var eaNo = document.getElementById('eaNo');
      var eaYesCard = document.getElementById('eaYesCard');
      var eaNoCard = document.getElementById('eaNoCard');
      
      if (eaYes && eaYes.checked) {
        eaYesCard.classList.add('active');
        eaNoCard.classList.remove('active');
      } else if (eaNo && eaNo.checked) {
        eaNoCard.classList.add('active');
        eaYesCard.classList.remove('active');
      } else {
        eaYesCard.classList.remove('active');
        eaNoCard.classList.remove('active');
      }
    }

    function getSelectedPainPoints() {
      var selected = [];
      for (var i = 1; i <= 8; i++) {
        var checkbox = document.getElementById('painPoint' + i + 'Checkbox');
        if (checkbox && checkbox.checked) {
          selected.push(i);
        }
      }
      return selected;
    }

    function getSelectedTechnologies() {
      var selected = [];
      var techMap = {
        'azureCheckbox': 'Azure',
        'm365Checkbox': 'M365',
        'awsCheckbox': 'AWS',
        'googleCheckbox': 'Google',
        'microsoftCheckbox': 'Microsoft',
        'ibmCheckbox': 'IBM',
        'oracleCheckbox': 'Oracle',
        'sapCheckbox': 'SAP',
        'servicenowCheckbox': 'ServiceNow'
      };
      
      var checkboxIds = Object.keys(techMap);
      for (var i = 0; i < checkboxIds.length; i++) {
        var checkboxId = checkboxIds[i];
        var checkbox = document.getElementById(checkboxId);
        if (checkbox && checkbox.checked) {
          selected.push(techMap[checkboxId]);
        }
      }
      
      return selected;
    }

    function getEAStatus() {
      var eaYes = document.getElementById('eaYes');
      var eaNo = document.getElementById('eaNo');
      
      if (eaYes && eaYes.checked) return true;
      if (eaNo && eaNo.checked) return false;
      return null;
    }

    function populateSummary() {
      // Challenges summary - show all selected challenges
      var painPointTexts = userSelections.painPoints.map(function(id) {
        return painPointTransforms[id].challenge;
      });
      var painPointsText = painPointTexts.join(', ');
      document.getElementById('painPointsSummary').textContent = painPointsText || 'None selected';
      
      // Technologies summary
      var techText = userSelections.technologies.join(', ');
      document.getElementById('techSummary').textContent = techText;
      
      // EA summary
      var eaText = userSelections.hasEA ? 'Yes' : 'No';
      document.getElementById('eaSummary').textContent = eaText;
      
      // Organization size summary
      var seats = document.getElementById('seatsQuestionnaire').value;
      document.getElementById('sizeSummary').textContent = seats + ' users';
    }

    function showSummary() {
      populateSummary();
      document.getElementById('selectionsSummary').style.display = 'block';
    }

    function hideSummary() {
      document.getElementById('selectionsSummary').style.display = 'none';
    }

    function editSelections() {
      hideSummary();
      document.getElementById('questionnaireSection').style.display = 'none';
      document.getElementById('painPointsSection').style.display = 'block';
      document.getElementById('resultsSection').classList.remove('visible');
      currentStep = 1;
      updateProgressBar();
      
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    function editFromQuestionnaire() {
      document.getElementById('questionnaireSection').style.display = 'none';
      document.getElementById('painPointsSection').style.display = 'block';
      currentStep = 1;
      updateProgressBar();
      
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    function continueToEnvironment() {
      userSelections.painPoints = getSelectedPainPoints();
      
      if (userSelections.painPoints.length === 0) {
        showNotification('Please select at least one challenge.', 'error');
        return;
      }
      
      // Update challenges summary for questionnaire
      var painPointTexts = userSelections.painPoints.map(function(id) {
        return painPointTransforms[id].challenge;
      });
      var painPointsText = painPointTexts.join(', ');
      document.getElementById('questionnairePainPointsSummary').textContent = painPointsText;
      
      // Show questionnaire section directly
      document.getElementById('painPointsSection').style.display = 'none';
      document.getElementById('questionnaireSection').style.display = 'block';
      currentStep = 2;
      updateProgressBar();
    }

    function calculatePreviewImpact(selectedPainPoints) {
      // Average customer profile: 1000 seats, Azure + M365 + IBM, No EA
      var avgSeats = 1000;
      var avgTech = ['Azure', 'M365', 'IBM'];
      var avgHasEA = false;
      
      // Get recommended services based on pain points
      var recommendedServiceKeys = new Set();
      for (var i = 0; i < selectedPainPoints.length; i++) {
        var painPoint = selectedPainPoints[i];
        var serviceKeys = painPointMapping[painPoint];
        if (serviceKeys) {
          for (var j = 0; j < serviceKeys.length; j++) {
            recommendedServiceKeys.add(serviceKeys[j]);
          }
        }
      }
      
      // Filter services based on average tech stack
      var validServices = [];
      var allServiceKeys = Object.keys(serviceData);
      
      for (var k = 0; k < allServiceKeys.length; k++) {
        var key = allServiceKeys[k];
        var service = serviceData[key];
        
        if (!recommendedServiceKeys.has(key)) {
          continue;
        }
        
        var isCompatible = false;
        for (var m = 0; m < avgTech.length; m++) {
          var tech = avgTech[m];
          for (var n = 0; n < service.requiredTech.length; n++) {
            if (service.requiredTech[n] === tech) {
              isCompatible = true;
              break;
            }
          }
          if (isCompatible) break;
        }
        
        if (service.requiresEA && !avgHasEA) {
          isCompatible = false;
        }
        
        if (isCompatible) {
          validServices.push({
            key: key,
            name: service.name
          });
        }
      }
      
      // Apply CSP bundling logic
      var hasCSP = false;
      var cspPainPoints = [1, 6]; // Cloud Cost Chaos and CSP Confusion
      var supportPainPoints = [8]; // Microsoft Support Bottlenecks
      var advisoryPainPoints = [3]; // License Complexity
      
      // Check if CSP Care Pack is in valid services
      for (var p = 0; p < validServices.length; p++) {
        if (validServices[p].key === 'csp') {
          hasCSP = true;
          break;
        }
      }
      
      if (hasCSP) {
        // Check if user selected CSP-related pain points AND support/advisory pain points
        var hasCSPPainPoints = cspPainPoints.some(function(painPoint) {
          return selectedPainPoints.indexOf(painPoint) !== -1;
        });
        
        var hasSupportPainPoints = supportPainPoints.some(function(painPoint) {
          return selectedPainPoints.indexOf(painPoint) !== -1;
        });
        
        var hasAdvisoryPainPoints = advisoryPainPoints.some(function(painPoint) {
          return selectedPainPoints.indexOf(painPoint) !== -1;
        });
        
        // Filter out individual services that are included in CSP Care Pack
        validServices = validServices.filter(function(service) {
          // Always remove M365 Data Security & Governance and M365 Copilot if CSP is present
          if (service.key === 'ds' || service.key === 'copilot') {
            return false;
          }
          
          // Remove Premium Support if user has CSP pain points AND support pain points
          if (service.key === 'ps' && hasCSPPainPoints && hasSupportPainPoints) {
            return false;
          }
          
          // Remove License Advisory if user has CSP pain points AND advisory pain points
          if (service.key === 'la' && hasCSPPainPoints && hasAdvisoryPainPoints) {
            return false;
          }
          
          return true;
        });
      }
      
      // Calculate impact for valid services
      var tempUserSelections = userSelections.technologies;
      userSelections.technologies = avgTech; // Temporarily set for CSP calculation
      var calculations = calculateServiceData(avgSeats);
      userSelections.technologies = tempUserSelections; // Restore
      
      var totalImpact = 0;
      for (var q = 0; q < validServices.length; q++) {
        var serviceKey = validServices[q].key;
        if (calculations[serviceKey]) {
          totalImpact += calculations[serviceKey].total;
        }
      }
      
      return totalImpact;
    }

    function calculateImpact() {
      userSelections.technologies = getSelectedTechnologies();
      userSelections.hasEA = getEAStatus();
      
      if (userSelections.technologies.length === 0) {
        showNotification('Please select at least one technology option.', 'error');
        return;
      }
      
      if (userSelections.hasEA === null) {
        showNotification('Please select whether you have an Enterprise Agreement.', 'error');
        return;
      }
      
      document.getElementById('questionnaireSection').style.display = 'none';
      showSummary();
      
      var recommendedServiceKeys = new Set();
      for (var j = 0; j < userSelections.painPoints.length; j++) {
        var painPoint = userSelections.painPoints[j];
        var serviceKeys = painPointMapping[painPoint];
        if (serviceKeys) {
          for (var k = 0; k < serviceKeys.length; k++) {
            recommendedServiceKeys.add(serviceKeys[k]);
          }
        }
      }

      var validServices = [];
      var allServiceKeys = Object.keys(serviceData);
      
      for (var m = 0; m < allServiceKeys.length; m++) {
        var key = allServiceKeys[m];
        var service = serviceData[key];
        
        if (!recommendedServiceKeys.has(key)) {
          continue;
        }
        
        var isCompatible = false;
        for (var n = 0; n < userSelections.technologies.length; n++) {
          var userTech = userSelections.technologies[n];
          for (var o = 0; o < service.requiredTech.length; o++) {
            if (service.requiredTech[o] === userTech) {
              isCompatible = true;
              break;
            }
          }
          if (isCompatible) break;
        }
        
        if (service.requiresEA && !userSelections.hasEA) {
          isCompatible = false;
        }
        
        if (isCompatible) {
          validServices.push({
            key: key,
            name: service.name,
            data: null
          });
        }
      }

      // CSP Care Pack bundling logic
      var hasCSP = false;
      var cspPainPoints = [1, 6]; // Cloud Cost Chaos and CSP Confusion
      var supportPainPoints = [8]; // Microsoft Support Bottlenecks
      var advisoryPainPoints = [3]; // License Complexity
      
      // Check if CSP Care Pack is in valid services
      for (var p = 0; p < validServices.length; p++) {
        if (validServices[p].key === 'csp') {
          hasCSP = true;
          break;
        }
      }
      
      if (hasCSP) {
        // Check if user selected CSP-related pain points AND support/advisory pain points
        var hasCSPPainPoints = cspPainPoints.some(function(painPoint) {
          return userSelections.painPoints.indexOf(painPoint) !== -1;
        });
        
        var hasSupportPainPoints = supportPainPoints.some(function(painPoint) {
          return userSelections.painPoints.indexOf(painPoint) !== -1;
        });
        
        var hasAdvisoryPainPoints = advisoryPainPoints.some(function(painPoint) {
          return userSelections.painPoints.indexOf(painPoint) !== -1;
        });
        
        // Filter out individual services that are included in CSP Care Pack
        validServices = validServices.filter(function(service) {
          // Always remove M365 Data Security & Governance and M365 Copilot if CSP is present
          if (service.key === 'ds' || service.key === 'copilot') {
            return false;
          }
          
          // Remove Premium Support if user has CSP pain points AND support pain points
          if (service.key === 'ps' && hasCSPPainPoints && hasSupportPainPoints) {
            return false;
          }
          
          // Remove License Advisory if user has CSP pain points AND advisory pain points
          if (service.key === 'la' && hasCSPPainPoints && hasAdvisoryPainPoints) {
            return false;
          }
          
          return true;
        });
      }

      if (validServices.length === 0) {
        showNotification('No compatible services found for your selection.', 'error');
        return;
      }

      var seats = parseNumberInput(document.getElementById('seatsQuestionnaire').value);
      var calculations = calculateServiceData(seats);
      
      for (var q = 0; q < validServices.length; q++) {
        validServices[q].data = calculations[validServices[q].key];
      }

      validServices.sort(function(a, b) {
        return b.data.total - a.data.total;
      });

      for (var r = 0; r < validServices.length; r++) {
        validServices[r].rank = r + 1;
      }

      generateResults(validServices, seats);
    }

    function formatCurrency(value) {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        maximumFractionDigits: 0
      }).format(value);
    }

    function formatNumberInput(value) {
      return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }

    function parseNumberInput(value) {
      return parseFloat(value.replace(/,/g, '')) || 0;
    }

    function calculateServiceData(seats) {
      var calculations = {};

      calculations.ds = {
        breachAvoided: seats * 165 * 0.27 * 0.40,
        complianceSavings: seats * 0.2 * 50,
        total: 0
      };
      calculations.ds.total = calculations.ds.breachAvoided + calculations.ds.complianceSavings;

      calculations.tp = {
        probabilityWeighted: seats * 200 * 0.30,
        avoidedCost: 0,
        total: 0
      };
      calculations.tp.avoidedCost = calculations.tp.probabilityWeighted * 0.35;
      calculations.tp.total = calculations.tp.avoidedCost;

      calculations.ps = {
        ticketCost: (seats * 20 / 100) * 400,
        timeSaved: 0,
        total: 0
      };
      calculations.ps.timeSaved = calculations.ps.ticketCost * 0.40;
      calculations.ps.total = calculations.ps.timeSaved;

      calculations.cm = {
        infraSavings: seats * 1475 * 0.40,
        userProductivity: seats * 75000 * 0.03,
        total: 0
      };
      calculations.cm.total = calculations.cm.infraSavings + calculations.cm.userProductivity;

      calculations.ao = {
        itOpsSavings: seats * 2 * 60,
        governanceSavings: seats * 1200 * 0.12,
        total: 0
      };
      calculations.ao.total = calculations.ao.itOpsSavings + calculations.ao.governanceSavings;

      calculations.co = {
        wasteSavings: seats * 1200 * 0.15,
        costAvoidance: seats * 1200 * 0.05,
        total: 0
      };
      calculations.co.total = calculations.co.wasteSavings + calculations.co.costAvoidance;

      calculations.aws = {
        billingDiscount: seats * 600 * 0.02,
        optimizationSavings: seats * 600 * 0.98 * 0.15,
        total: 0
      };
      calculations.aws.total = calculations.aws.billingDiscount + calculations.aws.optimizationSavings;

      calculations.lo = {
        licenseSavings: seats * 1200 * 0.25,
        complianceAvoidance: seats * 1200 * 0.05,
        total: 0
      };
      calculations.lo.total = calculations.lo.licenseSavings + calculations.lo.complianceAvoidance;

      calculations.la = {
        costAvoidance: seats * 1200 * 0.04,
        adminSavings: seats * 0.0432 * 60,
        total: 0
      };
      calculations.la.total = calculations.la.costAvoidance + calculations.la.adminSavings;

      calculations.as = {
        auditSavings: seats * 1200 * 0.22 * 0.15 * 0.60,
        adminSavings: seats * 0.07 * 60,
        total: 0
      };
      calculations.as.total = calculations.as.auditSavings + calculations.as.adminSavings;

      calculations.ea = {
        licenseOptimization: seats * 1200 * 0.30,
        adminSavings: seats * 0.1 * 60,
        total: 0
      };
      calculations.ea.total = calculations.ea.licenseOptimization + calculations.ea.adminSavings;

      calculations.copilot = {
        timeValueUplift: (seats * 75000 * 0.05 / 12) * 1.5,
        fullScalePotential: seats * 75000 * 0.05,
        total: 0
      };
      calculations.copilot.total = calculations.copilot.timeValueUplift;

      // CSP Care Pack - adjust calculation based on M365 selection
      var hasM365 = userSelections.technologies.indexOf('M365') !== -1;
      calculations.csp = {
        bundledServices: 0,
        cspDiscount: seats * 120,
        total: 0
      };
      
      // Base services that apply regardless of M365
      var supportValue = seats * 12; // Support services
      var advisoryValue = seats * 6; // Advisory services
      
      if (hasM365) {
        // Include Security and Copilot services if M365 is selected
        var securityValue = seats * 17.82; // Security services for M365
        var copilotValue = seats * 937.5; // Copilot services for M365
        calculations.csp.bundledServices = securityValue + supportValue + advisoryValue + copilotValue;
      } else {
        // Only include Support and Advisory services if no M365
        calculations.csp.bundledServices = supportValue + advisoryValue;
      }
      
      calculations.csp.total = calculations.csp.bundledServices + calculations.csp.cspDiscount;

      return calculations;
    }

    function buildMetricsBreakdown(serviceKey, data, seats) {
      var breakdowns = {
        ds: [
          {
            value: formatCurrency(data.breachAvoided),
            description: '$165/user breach cost, 27% probability, 40% risk reduction',
            source: '<a href="https://www.ibm.com/reports/data-breach" target="_blank">IBM Data Breach Report 2024</a>'
          },
          {
            value: formatCurrency(data.complianceSavings),
            description: '0.2 hours saved per user/year, $50/hour IT rate',
            source: '<a href="https://www.idc.com" target="_blank">IDC Study</a>'
          }
        ],
        tp: [
          {
            value: formatCurrency(data.probabilityWeighted),
            description: '$200/user incident cost, 30% probability',
            source: '<a href="https://www.ibm.com/reports/data-breach" target="_blank">IBM Data Breach Report</a>'
          },
          {
            value: '35% risk reduction',
            description: 'Risk reduction with M365 Threat Protection',
            source: '<a href="https://www.microsoft.com" target="_blank">Microsoft TEI</a>'
          }
        ],
        ps: [
          {
            value: formatCurrency(data.ticketCost),
            description: '20 tickets per 100 users/year, $400 downtime cost',
            source: '<a href="https://www.idc.com" target="_blank">IDC Study</a>'
          },
          {
            value: '40% time savings',
            description: 'Resolution time reduction with Premium Support',
            source: '<a href="https://www.microsoft.com" target="_blank">Microsoft TEI</a>'
          }
        ],
        cm: [
          {
            value: formatCurrency(data.infraSavings),
            description: '$1,475/user/year on-premises cost, 40% savings',
            source: '<a href="https://azure.microsoft.com" target="_blank">IDC Azure Study</a>'
          },
          {
            value: formatCurrency(data.userProductivity),
            description: '3% productivity gain on $75K salary',
            source: '<a href="https://info.microsoft.com" target="_blank">Forrester TEI</a>'
          }
        ],
        ao: [
          {
            value: formatCurrency(data.itOpsSavings),
            description: '2 hours saved per user/year, $60/hour IT rate',
            source: '<a href="https://azure.microsoft.com" target="_blank">IDC Study</a>'
          },
          {
            value: formatCurrency(data.governanceSavings),
            description: '$1,200/user Azure spend, 12% governance savings',
            source: '<a href="https://info.flexera.com" target="_blank">Flexera Report</a>'
          }
        ],
        co: [
          {
            value: formatCurrency(data.wasteSavings),
            description: '$1,200/user cloud spend, 15% waste reduction',
            source: '<a href="https://info.flexera.com" target="_blank">Flexera Report</a>'
          },
          {
            value: formatCurrency(data.costAvoidance),
            description: '5% proactive cost avoidance on cloud spend',
            source: '<a href="https://www.idc.com" target="_blank">IDC Study</a>'
          }
        ],
        aws: [
          {
            value: formatCurrency(data.billingDiscount),
            description: '$600/user AWS spend, 2% immediate billing discount',
            source: '<a href="https://www.crayon.com" target="_blank">Crayon Brochure</a>'
          },
          {
            value: formatCurrency(data.optimizationSavings),
            description: '15% ongoing optimization savings',
            source: '<a href="https://info.flexera.com" target="_blank">Flexera Report</a>'
          }
        ],
        lo: [
          {
            value: formatCurrency(data.licenseSavings),
            description: '$1,200/user annual license spend, 25% savings',
            source: '<a href="https://info.flexera.com" target="_blank">Flexera ITAM Report</a>'
          },
          {
            value: formatCurrency(data.complianceAvoidance),
            description: '5% compliance risk avoidance',
            source: '<a href="https://info.flexera.com" target="_blank">Flexera Report</a>'
          }
        ],
        la: [
          {
            value: formatCurrency(data.costAvoidance),
            description: '$1,200/user license spend, 4% cost avoidance',
            source: '<a href="https://info.flexera.com" target="_blank">Flexera ITAM 2024</a>'
          },
          {
            value: formatCurrency(data.adminSavings),
            description: (seats * 0.0432).toFixed(0) + ' hours saved annually, $60/hour IT rate',
            source: '<a href="https://info.flexera.com" target="_blank">Flexera Report</a>'
          }
        ],
        as: [
          {
            value: formatCurrency(data.auditSavings),
            description: '22% audit chance, 15% avg true-up, 60% cost avoidance',
            source: '<a href="https://www.gartner.com" target="_blank">Gartner Report</a>'
          },
          {
            value: formatCurrency(data.adminSavings),
            description: (seats * 0.07).toFixed(0) + ' hours saved annually, $60/hour IT rate',
            source: '<a href="https://www.gartner.com" target="_blank">Gartner Study</a>'
          }
        ],
        ea: [
          {
            value: formatCurrency(data.licenseOptimization),
            description: '$1,200/user license spend, 30% optimization savings',
            source: '<a href="https://info.flexera.com" target="_blank">Flexera ITAM 2024</a>'
          },
          {
            value: formatCurrency(data.adminSavings),
            description: (seats * 0.1).toFixed(0) + ' hours saved annually, $60/hour IT rate',
            source: 'Forrester TEI, Gartner SAM Reports'
          }
        ],
        copilot: [
          {
            value: formatCurrency(data.timeValueUplift),
            description: '1.5 month acceleration of 5% productivity gains',
            source: '<a href="https://info.microsoft.com" target="_blank">Forrester TEI Copilot</a>'
          },
          {
            value: 'Full potential: ' + formatCurrency(data.fullScalePotential) + '/year',
            description: 'Total annual productivity value with complete adoption',
            source: '<a href="https://info.microsoft.com" target="_blank">Forrester TEI</a>'
          }
        ],
        csp: [
          {
            value: formatCurrency(data.bundledServices),
            description: userSelections.technologies.indexOf('M365') !== -1 ? 
              'Combined value: Security + Support + Advisory + Copilot services' : 
              'Combined value: Support + Advisory services',
            source: '<a href="https://www.ibm.com/reports/data-breach" target="_blank">IBM Report</a>'
          },
          {
            value: formatCurrency(data.cspDiscount),
            description: '10% CSP discount vs EA pricing on $1,200/user spend',
            source: '<a href="https://www.crayon.com" target="_blank">Crayon CSP Brochure</a>'
          }
        ]
      };
      return breakdowns[serviceKey] || [];
    }

    function generateResults(sortedServices, seats) {
      var totalImpact = 0;
      
      for (var i = 0; i < sortedServices.length; i++) {
        totalImpact += sortedServices[i].data.total;
      }

      // Update hero impact display
      document.getElementById('heroImpactDisplay').textContent = formatCurrency(totalImpact);
      
      // Update context
      var techList = userSelections.technologies.join(', ');
      document.getElementById('impactContext').textContent = 'For ' + seats.toLocaleString() + ' users with ' + techList;
      
      // Populate conquered pain points
      var painPointsList = document.getElementById('conqueredPainPointsList');
      painPointsList.innerHTML = '';
      
      // Store observer setup for after initial render
      var observerSetupData = [];
      
      for (var p = 0; p < userSelections.painPoints.length; p++) {
        var painPointId = userSelections.painPoints[p];
        var painPointDiv = document.createElement('div');
        painPointDiv.className = 'pain-point-item';
        painPointDiv.style.animationDelay = (p * 0.1 + 1) + 's';
        painPointDiv.setAttribute('data-pain-point-id', painPointId);
        
        var transform = painPointTransforms[painPointId];
        
        // Initially show only the challenge text
        var textSpan = document.createElement('span');
        textSpan.className = 'pain-point-text';
        textSpan.innerHTML = '<span class="challenge-text">' + transform.challenge + '</span>';
        
        painPointDiv.appendChild(textSpan);
        painPointsList.appendChild(painPointDiv);
        
        // Store data for later observer setup
        observerSetupData.push({
          element: painPointDiv,
          transform: transform
        });
      }
      
      // Set up the transformation after a delay to ensure proper rendering
      setTimeout(function() {
        // Add resolved text to each item
        observerSetupData.forEach(function(data) {
          var textSpan = data.element.querySelector('.pain-point-text');
          var resolvedSpan = document.createElement('span');
          resolvedSpan.className = 'resolved-text';
          
          var parts = data.transform.resolved.split(' ');
          var baseText = parts.slice(0, -1).join(' ');
          var lastWord = parts[parts.length - 1];
          
          resolvedSpan.innerHTML = baseText + ' <span class="resolved-word">' + lastWord + '</span>';
          textSpan.appendChild(resolvedSpan);
        });
        
        // Set up Intersection Observer with a delay to avoid initial trigger
        setTimeout(function() {
          var transformTriggered = false;
          var conqueredSection = document.querySelector('.conquered-pain-points');
          
          if (conqueredSection) {
            var observer = new IntersectionObserver(function(entries) {
              entries.forEach(function(entry) {
                // Only trigger if scrolling down (not on initial load)
                if (entry.isIntersecting && !transformTriggered && entry.intersectionRatio > 0) {
                  transformTriggered = true;
                  // Add a dramatic pause before transformation
                  setTimeout(function() {
                    // Add a pulsing effect to draw attention
                    var allPainPoints = document.querySelectorAll('.pain-point-item');
                    allPainPoints.forEach(function(item, index) {
                      // Stagger the transformations slightly for wave effect
                      setTimeout(function() {
                        item.classList.add('transformed');
                      }, index * 100); // 100ms delay between each item
                    });
                  }, 300); // Small delay after section comes into view
                }
              });
            }, {
              threshold: 0.6, // Trigger when 60% of the section is visible
              rootMargin: '0px 0px -100px 0px' // Add negative margin to ensure user has scrolled
            });
            
            observer.observe(conqueredSection);
          }
        }, 2000); // Wait 2 seconds before setting up observer to avoid initial trigger
      }, 1500); // Wait for initial animations to complete

      var tableContent = document.getElementById('tableContent');
      tableContent.innerHTML = '';

      for (var j = 0; j < sortedServices.length; j++) {
        var service = sortedServices[j];
        var row = document.createElement('div');
        row.className = 'table-row';
        row.style.animationDelay = (j * 0.1 + 1.4) + 's';

        var metricsBreakdown = buildMetricsBreakdown(service.key, service.data, seats);
        
        var metricsHTML = '';
        for (var k = 0; k < metricsBreakdown.length; k++) {
          var metric = metricsBreakdown[k];
          metricsHTML += '<div class="metric-component"><div class="value">' + metric.value + '</div><div class="description">' + metric.description + '</div><div class="source">' + metric.source + '</div></div>';
        }

        // Check if this service should have the MAX IMPACT PACK badge
        var maxImpactServices = ['csp', 'aws', 'ea'];
        var serviceNameHTML = service.name;
        if (maxImpactServices.indexOf(service.key) !== -1) {
          serviceNameHTML += '<div style="background: linear-gradient(135deg, #ff6b4c 0%, #ff8f70 100%); color: white; font-size: 0.7rem; font-weight: 700; padding: 0.25rem 0.5rem; border-radius: 4px; text-transform: uppercase; letter-spacing: 0.5px; margin-top: 0.5rem; display: inline-block;">MAX IMPACT PACK</div>';
        }
        
        // Add special styling for top 3 services
        var rankClass = j < 3 ? 'rank-number top-rank' : 'rank-number';

        row.innerHTML = '<div class="' + rankClass + '">' + service.rank + '</div><div class="service-name">' + serviceNameHTML + '</div><div class="solution-text">' + serviceData[service.key].solution + '</div><div class="impact-total">' + formatCurrency(service.data.total) + '</div><div class="metrics-breakdown">' + metricsHTML + '</div>';

        tableContent.appendChild(row);
      }

      document.getElementById('resultsSection').classList.add('visible');
      currentStep = 3;
      updateProgressBar();
      showNotification('Your path to IT Legend status is ready!', 'success');
      
      // Animate the button with the results
      setTimeout(function() {
        var scrollBtn = document.getElementById('scrollToDetails');
        if (scrollBtn) {
          scrollBtn.style.transition = 'opacity 0.8s ease-out, transform 0.8s ease-out';
          scrollBtn.style.opacity = '1';
          scrollBtn.style.transform = 'translateY(0)';
        }
      }, 800);
      
      // Override button styles on hover
      setTimeout(function() {
        var scrollBtn = document.getElementById('scrollToDetails');
        if (scrollBtn) {
          scrollBtn.addEventListener('mouseenter', function() {
            this.style.background = 'rgba(255, 255, 255, 0.05)';
            this.style.borderColor = 'rgba(255, 107, 76, 0.5)';
            this.style.color = '#ff6b4c';
            this.style.animation = 'none';
            this.style.opacity = '1';
          });
          
          scrollBtn.addEventListener('mouseleave', function() {
            this.style.background = 'transparent';
            this.style.borderColor = 'rgba(255, 255, 255, 0.2)';
            this.style.color = '#ffffff';
            this.style.opacity = '1';
          });
        }
      }, 1000);
      
      // Smooth scroll to results
      setTimeout(function() {
        document.getElementById('resultsSection').scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
      }, 100);
    }

    function scrollToDetailsSection() {
      var leadGateSection = document.getElementById('leadGateSection');
      if (leadGateSection) {
        var yOffset = -40; // Reduced cushion to 40px for better visibility
        var y = leadGateSection.getBoundingClientRect().top + window.pageYOffset + yOffset;
        
        window.scrollTo({
          top: y,
          behavior: 'smooth'
        });
      }
    }
    
    function handleLeadSubmit() {
      var firstName = document.getElementById('firstName').value;
      var lastName = document.getElementById('lastName').value;
      var email = document.getElementById('email').value;
      var company = document.getElementById('company').value;
      var phone = document.getElementById('phone').value;
      
      // Basic validation
      if (!firstName || !lastName || !email || !company) {
        showNotification('Please fill in all required fields.', 'error');
        return false;
      }
      
      // Email validation
      var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        showNotification('Please enter a valid email address.', 'error');
        return false;
      }
      
      // Calculate total estimated impact
      var totalImpact = 0;
      var recommendedServices = [];
      
      // Get the calculated services from the results (if they exist)
      var tableRows = document.querySelectorAll('#tableContent .table-row');
      tableRows.forEach(function(row) {
        var serviceName = row.querySelector('.service-name');
        var impactTotal = row.querySelector('.impact-total');
        
        if (serviceName && impactTotal) {
          // Extract service name without the badge
          var serviceText = serviceName.textContent.replace('MAX IMPACT PACK', '').trim();
          recommendedServices.push(serviceText);
          
          // Extract impact value
          var impactText = impactTotal.textContent.replace(/[$,]/g, '');
          totalImpact += parseFloat(impactText) || 0;
        }
      });
      
      // Convert pain points and technologies to comma-separated strings
      var painPointTexts = userSelections.painPoints.map(function(id) {
        return painPointTransforms[id].challenge;
      }).join(', ');
      
      var techText = userSelections.technologies.join(', ');
      var recommendedServicesText = recommendedServices.join(', ');
      
      // Prepare data for Power Automate flow
      var flowData = {
        FirstName: firstName,
        LastName: lastName,
        Email: email,
        Company: company,
        Phone: phone || '',
        PainPoints: painPointTexts,
        Technologies: techText,
        HasEA: userSelections.hasEA ? 'Yes' : 'No',
        Seats: parseNumberInput(document.getElementById('seatsQuestionnaire').value),
        SubmissionDate: new Date().toISOString(),
        EstimatedImpact: Math.round(totalImpact),
        RecommendedServices: recommendedServicesText
      };
      
      // Show loading state
      var submitBtn = document.getElementById('submitLead');
      var originalBtnText = submitBtn.textContent;
      submitBtn.textContent = 'Submitting...';
      submitBtn.disabled = true;
      
      // Log the data being sent (for debugging)
      console.log('Submitting lead data:', flowData);
      
      // Send data to Power Automate flow
      var flowUrl = 'https://prod-205.westeurope.logic.azure.com:443/workflows/0b942cf968a74602aa5c06135748178d/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Wh28p1qU44qR5gGA9TjSbtNnaRNVTYOpSu6MQ3NotJc';
      
      // Try to send to Power Automate
      fetch(flowUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        mode: 'no-cors', // This bypasses CORS but limits response access
        body: JSON.stringify(flowData)
      })
      .then(function() {
        // With no-cors mode, we can't read the response, but the request should go through
        console.log('Lead data sent to Power Automate (no-cors mode)');
        
        // Success! Hide the gate and show the detailed content
        document.getElementById('leadGateSection').style.display = 'none';
        document.getElementById('gatedContent').classList.add('unlocked');
        
        // Smooth scroll to the detailed table
        setTimeout(function() {
          document.getElementById('exportableContent').scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
          });
        }, 300);
        
        // Store data locally as backup
        try {
          var storedLeads = JSON.parse(localStorage.getItem('itLegendLeads') || '[]');
          storedLeads.push(flowData);
          localStorage.setItem('itLegendLeads', JSON.stringify(storedLeads));
          console.log('Lead data also saved locally as backup');
        } catch (e) {
          console.log('Could not save to localStorage:', e);
        }
      })
      .catch(function(error) {
        console.error('Error submitting to Power Automate:', error);
        
        // Try alternative method - create a form post
        try {
          // Create a hidden form and submit it
          var form = document.createElement('form');
          form.method = 'POST';
          form.action = flowUrl;
          form.target = '_blank';
          form.style.display = 'none';
          
          var input = document.createElement('input');
          input.type = 'hidden';
          input.name = 'data';
          input.value = JSON.stringify(flowData);
          form.appendChild(input);
          
          document.body.appendChild(form);
          form.submit();
          document.body.removeChild(form);
          
          console.log('Attempted form-based submission as fallback');
        } catch (formError) {
          console.error('Form submission also failed:', formError);
        }
        
        // Still show the content even if submission fails
        document.getElementById('leadGateSection').style.display = 'none';
        document.getElementById('gatedContent').classList.add('unlocked');
        
        setTimeout(function() {
          document.getElementById('exportableContent').scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
          });
        }, 300);
        
        // Store failed submission for retry
        try {
          var failedSubmissions = JSON.parse(localStorage.getItem('itLegendFailedSubmissions') || '[]');
          failedSubmissions.push({
            data: flowData,
            timestamp: new Date().toISOString(),
            error: error.toString()
          });
          localStorage.setItem('itLegendFailedSubmissions', JSON.stringify(failedSubmissions));
          console.log('Failed submission saved for manual processing');
        } catch (e) {
          console.log('Could not save failed submission:', e);
        }
      })
      .finally(function() {
        // Reset button state
        submitBtn.textContent = originalBtnText;
        submitBtn.disabled = false;
      });
      
      return false;
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      updateProgressBar();
      updatePainPointCardStates();
      updateTechCardStates();
      updateEACardStates();
      
      // Challenge checkboxes
      for (var i = 1; i <= 8; i++) {
        (function(index) {
          var painPointCard = document.getElementById('painPoint' + index + 'Card');
          var painPointCheckbox = document.getElementById('painPoint' + index + 'Checkbox');
          
          if (painPointCard && painPointCheckbox) {
            // Remove the label's default behavior and handle clicks on the card
            var label = painPointCard.querySelector('label');
            if (label) {
              label.style.pointerEvents = 'none';
            }
            
            // Make the checkbox itself still clickable
            painPointCheckbox.style.pointerEvents = 'auto';
            
            // Add click handler to the entire card
            painPointCard.addEventListener('click', function(e) {
              e.stopPropagation();
              // Toggle the checkbox
              painPointCheckbox.checked = !painPointCheckbox.checked;
              updatePainPointCardStates();
            });
            
            // Prevent double-toggle when clicking checkbox directly
            painPointCheckbox.addEventListener('click', function(e) {
              e.stopPropagation();
              updatePainPointCardStates();
            });
          }
        })(i);
      }
      
      // Continue button from challenges to questionnaire
      var continueToEnvBtn = document.getElementById('continueToEnvironment');
      if (continueToEnvBtn) {
        continueToEnvBtn.addEventListener('click', function(e) {
          e.preventDefault();
          continueToEnvironment();
        });
      } else {
        console.error('Continue button not found');
      }
      
      // Back button
      var backToChallengesBtn = document.getElementById('backToChallenges');
      if (backToChallengesBtn) {
        backToChallengesBtn.addEventListener('click', function() {
          document.getElementById('questionnaireSection').style.display = 'none';
          document.getElementById('painPointsSection').style.display = 'block';
          currentStep = 1;
          updateProgressBar();
          window.scrollTo({ top: 0, behavior: 'smooth' });
        });
      }
      
      // Edit button from questionnaire
      var editFromQuestionnaireBtn = document.getElementById('editFromQuestionnaire');
      if (editFromQuestionnaireBtn) {
        editFromQuestionnaireBtn.addEventListener('click', editFromQuestionnaire);
      }
      
      // Tech checkboxes
      var techCheckboxes = ['azure', 'm365', 'aws', 'google', 'microsoft', 'ibm', 'oracle', 'sap', 'servicenow'];
      for (var j = 0; j < techCheckboxes.length; j++) {
        (function(tech) {
          var card = document.getElementById(tech + 'Card');
          var checkbox = document.getElementById(tech + 'Checkbox');
          
          if (card && checkbox) {
            // Remove the label's default behavior
            var label = card.querySelector('label');
            if (label) {
              label.style.pointerEvents = 'none';
            }
            
            // Make the checkbox itself still clickable
            checkbox.style.pointerEvents = 'auto';
            
            // Add click handler to the entire card
            card.addEventListener('click', function(e) {
              e.stopPropagation();
              checkbox.checked = !checkbox.checked;
              updateTechCardStates();
            });
            
            // Prevent double-toggle when clicking checkbox directly
            checkbox.addEventListener('click', function(e) {
              e.stopPropagation();
              updateTechCardStates();
            });
          }
        })(techCheckboxes[j]);
      }
      
      // EA radio buttons
      var eaYes = document.getElementById('eaYes');
      var eaNo = document.getElementById('eaNo');
      var eaYesCard = document.getElementById('eaYesCard');
      var eaNoCard = document.getElementById('eaNoCard');
      
      if (eaYes) eaYes.addEventListener('change', updateEACardStates);
      if (eaNo) eaNo.addEventListener('change', updateEACardStates);
      
      // Add click handlers to EA cards
      if (eaYesCard && eaYes) {
        var labelYes = eaYesCard.querySelector('label');
        if (labelYes) {
          labelYes.style.pointerEvents = 'none';
        }
        eaYes.style.pointerEvents = 'auto';
        
        eaYesCard.addEventListener('click', function(e) {
          e.stopPropagation();
          eaYes.checked = true;
          updateEACardStates();
        });
        
        eaYes.addEventListener('click', function(e) {
          e.stopPropagation();
          updateEACardStates();
        });
      }
      
      if (eaNoCard && eaNo) {
        var labelNo = eaNoCard.querySelector('label');
        if (labelNo) {
          labelNo.style.pointerEvents = 'none';
        }
        eaNo.style.pointerEvents = 'auto';
        
        eaNoCard.addEventListener('click', function(e) {
          e.stopPropagation();
          eaNo.checked = true;
          updateEACardStates();
        });
        
        eaNo.addEventListener('click', function(e) {
          e.stopPropagation();
          updateEACardStates();
        });
      }
      
      // Continue button from environment to results
      var continueToResultsBtn = document.getElementById('continueToResults');
      if (continueToResultsBtn) {
        continueToResultsBtn.addEventListener('click', calculateImpact);
      }
      
      // Edit button
      var editBtn = document.getElementById('editSelections');
      if (editBtn) {
        editBtn.addEventListener('click', editSelections);
      }
      
      // Seats input formatting
      var seatsInput = document.getElementById('seatsQuestionnaire');
      if (seatsInput) {
        seatsInput.addEventListener('input', function(e) {
          var value = parseNumberInput(e.target.value);
          if (!isNaN(value) && value >= 0) {
            e.target.value = formatNumberInput(value);
          }
        });
        
        seatsInput.addEventListener('blur', function(e) {
          var value = parseNumberInput(e.target.value);
          if (!isNaN(value) && value >= 0) {
            e.target.value = formatNumberInput(value);
          }
        });
      }
      
      // Lead form submission
      var leadForm = document.getElementById('leadForm');
      var submitLeadBtn = document.getElementById('submitLead');
      
      if (leadForm) {
        leadForm.addEventListener('submit', function(e) {
          e.preventDefault();
          handleLeadSubmit();
        });
      }
      
      if (submitLeadBtn) {
        submitLeadBtn.addEventListener('click', function(e) {
          e.preventDefault();
          handleLeadSubmit();
        });
      }
      
      // Scroll to details button
      var scrollToDetailsBtn = document.getElementById('scrollToDetails');
      if (scrollToDetailsBtn) {
        scrollToDetailsBtn.addEventListener('click', function() {
          var leadGateSection = document.getElementById('leadGateSection');
          if (leadGateSection) {
            leadGateSection.scrollIntoView({ 
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      }
      
      // CTA button handlers
      var scheduleCallBtn = document.getElementById('scheduleCall');
      if (scheduleCallBtn) {
        scheduleCallBtn.addEventListener('click', function() {
          // In real implementation, this would open a calendar scheduling tool
          window.open('https://calendly.com/crayon-demo', '_blank');
        });
      }
      
      var downloadResultsBtn = document.getElementById('downloadResults');
      if (downloadResultsBtn) {
        downloadResultsBtn.addEventListener('click', function() {
          // Export the lead data as JSON file
          exportLeadData();
        });
      }
    });
    
    // Function to export lead data
    function exportLeadData() {
      try {
        // Get the current form data
        var firstName = document.getElementById('firstName').value;
        var lastName = document.getElementById('lastName').value;
        var email = document.getElementById('email').value;
        var company = document.getElementById('company').value;
        var phone = document.getElementById('phone').value;
        
        // Calculate total estimated impact
        var totalImpact = 0;
        var recommendedServices = [];
        
        // Get the calculated services from the results
        var tableRows = document.querySelectorAll('#tableContent .table-row');
        tableRows.forEach(function(row) {
          var serviceName = row.querySelector('.service-name');
          var impactTotal = row.querySelector('.impact-total');
          
          if (serviceName && impactTotal) {
            var serviceText = serviceName.textContent.replace('MAX IMPACT PACK', '').trim();
            recommendedServices.push(serviceText);
            
            var impactText = impactTotal.textContent.replace(/[$,]/g, '');
            totalImpact += parseFloat(impactText) || 0;
          }
        });
        
        // Convert pain points and technologies to comma-separated strings
        var painPointTexts = userSelections.painPoints.map(function(id) {
          return painPointTransforms[id].challenge;
        }).join(', ');
        
        var techText = userSelections.technologies.join(', ');
        var recommendedServicesText = recommendedServices.join(', ');
        
        // Create the data object
        var exportData = {
          FirstName: firstName,
          LastName: lastName,
          Email: email,
          Company: company,
          Phone: phone || '',
          PainPoints: painPointTexts,
          Technologies: techText,
          HasEA: userSelections.hasEA ? 'Yes' : 'No',
          Seats: parseNumberInput(document.getElementById('seatsQuestionnaire').value),
          SubmissionDate: new Date().toISOString(),
          EstimatedImpact: Math.round(totalImpact),
          RecommendedServices: recommendedServicesText
        };
        
        // Create and download JSON file
        var dataStr = JSON.stringify(exportData, null, 2);
        var dataBlob = new Blob([dataStr], {type: 'application/json'});
        var url = URL.createObjectURL(dataBlob);
        var link = document.createElement('a');
        link.href = url;
        link.download = 'ITLegend_Lead_' + email.replace('@', '_') + '_' + new Date().getTime() + '.json';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        console.log('Lead data exported successfully');
        
        // Also copy to clipboard for easy pasting
        navigator.clipboard.writeText(JSON.stringify(exportData, null, 2)).then(function() {
          alert('Lead data has been downloaded and copied to clipboard!');
        }).catch(function(err) {
          alert('Lead data has been downloaded!');
        });
        
      } catch (error) {
        console.error('Error exporting lead data:', error);
        alert('Error exporting data. Please check the console.');
      }
    }
    
    // Helper function to retrieve all stored leads
    window.getStoredLeads = function() {
      var stored = localStorage.getItem('itLegendFailedSubmissions');
      if (stored) {
        var leads = JSON.parse(stored);
        console.log('Found ' + leads.length + ' stored lead(s):');
        leads.forEach(function(item, index) {
          console.log('Lead ' + (index + 1) + ':', item.data);
        });
        return leads;
      } else {
        console.log('No stored leads found');
        return [];
      }
    };
    
    // Helper function to copy lead data to clipboard
    window.copyLeadToClipboard = function(index) {
      var stored = localStorage.getItem('itLegendFailedSubmissions');
      if (stored) {
        var leads = JSON.parse(stored);
        if (leads[index]) {
          var leadData = JSON.stringify(leads[index].data, null, 2);
          navigator.clipboard.writeText(leadData).then(function() {
            console.log('Lead data copied to clipboard!');
          });
        }
      }
    };
  </script>
</body>
</html>